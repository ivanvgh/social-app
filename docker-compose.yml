
services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 3s
      retries: 10

  mongo:
    image: mongo:7
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - '${MONGO_PORT}:27017'
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ['CMD-SHELL', 'mongosh --quiet --eval "db.runCommand({ ping: 1 }).ok" || exit 1']
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ['redis-server', '--save', '','--appendonly', 'no']
    ports:
      - '${REDIS_PORT}:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10

  gateway:
    build: { context: ./gateway }
    environment:
      PORT: 8000
    ports:
      - '${GATEWAY_PORT}:8000'
    depends_on:
      - redis

  auth:
    build: { context: ./auth }
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: 8000
    ports:
      - '${AUTH_PORT}:8000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  profiles:
    build: { context: ./profiles }
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: 8000
    ports:
      - '${PROFILES_PORT}:8000'
    depends_on:
      postgres:
        condition: service_healthy

  posts:
    build: { context: ./posts }
    environment:
      MONGO_URL: ${MONGO_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 8000
    ports:
      - '${POSTS_PORT}:8000'
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy

  comments:
    build: { context: ./comments }
    environment:
      MONGO_URL: ${MONGO_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 8000
    ports:
      - '${COMMENTS_PORT}:8000'
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy

  notifications:
    build: { context: ./notifications }
    environment:
      MONGO_URL: ${MONGO_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 8000
    ports:
      - '${NOTIFICATIONS_PORT}:8000'
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy

  media:
    build: { context: ./media }
    environment:
      PORT: 8000
    ports:
      - '${MEDIA_PORT}:8000'

volumes:
  pg_data:
  mongo_data:
